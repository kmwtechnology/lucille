# This is a configuration file for indexing project files into OpenSearch with vector capabilities
# It is in HOCON format, a superset of JSON

connectors: [
  {
    name: "fileConnector",
    class: "com.kmwllc.lucille.connector.FileConnector",
    pipeline: "pipeline1",
    # Path to the Lucille project directory (will be set as environment variable)
    pathToStorage: ${PROJECT_PATH}
    # Include various file types we want to process
    includeSuffixes: [".java", ".xml", ".md", ".txt", ".properties", ".conf", ".json", ".sh", ".py", ".yml", ".yaml"]
    # Exclude directories we don't want to process
    excludePatterns: [
      "**/target/**", 
      "**/.git/**", 
      "**/.idea/**", 
      "**/bin/**", 
      "**/node_modules/**", 
      "**/.settings/**",
      "**/build/**",
      "**/dist/**",
      "**/out/**"
    ]
    # Limit the number of files to process (increase for production use)
    maxDocs: 30
    # Use simple text extraction for basic file types
    extractText: true
  }
]

pipelines: [
  {
    name: "pipeline1",
    stages: [
      # Extract text content from files using Tika for complex file formats
      {
        name: "TextExtractor"
        class: "com.kmwllc.lucille.tika.stage.TextExtractor"
        byte_array_field: "file_content"
        metadata_prefix: ""
        tika_config_path: "conf/tika-config.xml"
      },
      # Rename fields for better readability
      {
        name: "renameFields",
        class: "com.kmwllc.lucille.stage.RenameFields"
        fieldMapping: {
          "text": "content",
          "path": "full_path",
          "name": "filename"
        }
        update_mode: "overwrite"
      },
      # Extract file extension as a field
      {
        name: "addFileExt",
        class: "com.kmwllc.lucille.stage.SetStaticValues"
        static_values: {
          "file_extension": "${full_path.replaceAll(\"^.*(\\\\.\\\\w+)$\", \"$1\")}"
        }
        update_mode: "overwrite"
      },
      # Copy the content to chunk_text field for embedding
      {
        name: "copyToChunk",
        class: "com.kmwllc.lucille.stage.CopyFields"
        source: ["content"]
        dest: ["chunk_text"]
      },
      # Add text chunking stage to break content into smaller chunks
      {
        name: "textChunker",
        class: "com.kmwllc.lucille.stage.ChunkText"
        source: "chunk_text"
        dest: "chunk_text"
        chunking_method: "fixed"
        length_to_split: 2000
        clean_chunks: true
        chunks_to_merge: 1
        overlap_percentage: 10
      },
      # Emit chunk children as separate documents
      {
        name: "emitChunks",
        class: "com.kmwllc.lucille.stage.EmitNestedChildren"
        drop_parent: true
        fields_to_copy: {
          "file_path": "file_path"
          "file_extension": "file_extension"
          "file_size_bytes": "file_size_bytes"
          "file_modification_date": "file_modification_date"
          "file_creation_date": "file_creation_date"
        }
      },
      # Generate embeddings using Google Gemini API
      {
        name: "geminiEmbed",
        class: "com.kmwllc.lucille.example.GeminiEmbed"
        source: "chunk_text"
        dest: "chunk_vector"
        embed_document: true
        embed_children: false
        api_key: ${?GEMINI_API_KEY}
        model_name: "text-embedding-004"
        dimensions: 768
        request_timeout_millis: 30000
      }
    ],
    "destination": {
      "type": "opensearch",
      "url": ${?OPENSEARCH_URL},
      "index": ${?OPENSEARCH_INDEX}
    }
  }
]

indexer {
  type: "OpenSearch"
  batchTimeout: 2000
  batchSize: 5
  sendEnabled: true
}

opensearch {
  # OpenSearch URL will be set as environment variable
  url: ${OPENSEARCH_URL}
  # Index name will be set as environment variable
  index: ${OPENSEARCH_INDEX}
  acceptInvalidCert: true
}

worker {
  pipeline: "pipeline1"
  threads: 1
}

publisher {
  queueCapacity: 100
}

log {
  seconds: 30
}
